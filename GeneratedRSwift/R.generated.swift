//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `OnBoarding`.
    static let onBoarding = _R.storyboard.onBoarding()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "OnBoarding", bundle: ...)`
    static func onBoarding(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.onBoarding)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 7 colors.
  struct color {
    /// Color `Color`.
    static let color = Rswift.ColorResource(bundle: R.hostingBundle, name: "Color")
    /// Color `darkPrimaryColor`.
    static let darkPrimaryColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "darkPrimaryColor")
    /// Color `dividerColor`.
    static let dividerColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "dividerColor")
    /// Color `endColor`.
    static let endColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "endColor")
    /// Color `primaryColor`.
    static let primaryColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "primaryColor")
    /// Color `primaryTextColor`.
    static let primaryTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "primaryTextColor")
    /// Color `secondaryTextColor`.
    static let secondaryTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondaryTextColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "darkPrimaryColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkPrimaryColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkPrimaryColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "dividerColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func dividerColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.dividerColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "endColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func endColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.endColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primaryColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "primaryTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondaryTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryTextColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 31 images.
  struct image {
    /// Image `Bitmap`.
    static let bitmap = Rswift.ImageResource(bundle: R.hostingBundle, name: "Bitmap")
    /// Image `ListRestau`.
    static let listRestau = Rswift.ImageResource(bundle: R.hostingBundle, name: "ListRestau")
    /// Image `asian`.
    static let asian = Rswift.ImageResource(bundle: R.hostingBundle, name: "asian")
    /// Image `bg-dark-down`.
    static let bgDarkDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg-dark-down")
    /// Image `bg-dark`.
    static let bgDark = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg-dark")
    /// Image `bleuCard`.
    static let bleuCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "bleuCard")
    /// Image `brown`.
    static let brown = Rswift.ImageResource(bundle: R.hostingBundle, name: "brown")
    /// Image `burger`.
    static let burger = Rswift.ImageResource(bundle: R.hostingBundle, name: "burger")
    /// Image `default-food`.
    static let defaultFood = Rswift.ImageResource(bundle: R.hostingBundle, name: "default-food")
    /// Image `food-img`.
    static let foodImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "food-img")
    /// Image `green-light`.
    static let greenLight = Rswift.ImageResource(bundle: R.hostingBundle, name: "green-light")
    /// Image `greenCard`.
    static let greenCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "greenCard")
    /// Image `greyCard`.
    static let greyCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "greyCard")
    /// Image `indian`.
    static let indian = Rswift.ImageResource(bundle: R.hostingBundle, name: "indian")
    /// Image `kabab`.
    static let kabab = Rswift.ImageResource(bundle: R.hostingBundle, name: "kabab")
    /// Image `lebanese`.
    static let lebanese = Rswift.ImageResource(bundle: R.hostingBundle, name: "lebanese")
    /// Image `left_side`.
    static let left_side = Rswift.ImageResource(bundle: R.hostingBundle, name: "left_side")
    /// Image `map`.
    static let map = Rswift.ImageResource(bundle: R.hostingBundle, name: "map")
    /// Image `marocain`.
    static let marocain = Rswift.ImageResource(bundle: R.hostingBundle, name: "marocain")
    /// Image `menu`.
    static let menu = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu")
    /// Image `orangeShade`.
    static let orangeShade = Rswift.ImageResource(bundle: R.hostingBundle, name: "orangeShade")
    /// Image `pinkCard`.
    static let pinkCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "pinkCard")
    /// Image `pizza`.
    static let pizza = Rswift.ImageResource(bundle: R.hostingBundle, name: "pizza")
    /// Image `purpleCard`.
    static let purpleCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "purpleCard")
    /// Image `restauPref`.
    static let restauPref = Rswift.ImageResource(bundle: R.hostingBundle, name: "restauPref")
    /// Image `salade`.
    static let salade = Rswift.ImageResource(bundle: R.hostingBundle, name: "salade")
    /// Image `sheet-bottom-fog-12`.
    static let sheetBottomFog12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sheet-bottom-fog-12")
    /// Image `sheet-bottom-fog-40`.
    static let sheetBottomFog40 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sheet-bottom-fog-40")
    /// Image `suggestion`.
    static let suggestion = Rswift.ImageResource(bundle: R.hostingBundle, name: "suggestion")
    /// Image `tealCard`.
    static let tealCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "tealCard")
    /// Image `yellowCard`.
    static let yellowCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "yellowCard")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Bitmap", bundle: ..., traitCollection: ...)`
    static func bitmap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bitmap, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ListRestau", bundle: ..., traitCollection: ...)`
    static func listRestau(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.listRestau, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "asian", bundle: ..., traitCollection: ...)`
    static func asian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.asian, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg-dark", bundle: ..., traitCollection: ...)`
    static func bgDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgDark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg-dark-down", bundle: ..., traitCollection: ...)`
    static func bgDarkDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgDarkDown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bleuCard", bundle: ..., traitCollection: ...)`
    static func bleuCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bleuCard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "brown", bundle: ..., traitCollection: ...)`
    static func brown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "burger", bundle: ..., traitCollection: ...)`
    static func burger(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.burger, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "default-food", bundle: ..., traitCollection: ...)`
    static func defaultFood(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defaultFood, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "food-img", bundle: ..., traitCollection: ...)`
    static func foodImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.foodImg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "green-light", bundle: ..., traitCollection: ...)`
    static func greenLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenLight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greenCard", bundle: ..., traitCollection: ...)`
    static func greenCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greenCard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "greyCard", bundle: ..., traitCollection: ...)`
    static func greyCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greyCard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "indian", bundle: ..., traitCollection: ...)`
    static func indian(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.indian, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kabab", bundle: ..., traitCollection: ...)`
    static func kabab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kabab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "lebanese", bundle: ..., traitCollection: ...)`
    static func lebanese(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lebanese, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "left_side", bundle: ..., traitCollection: ...)`
    static func left_side(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.left_side, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map", bundle: ..., traitCollection: ...)`
    static func map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "marocain", bundle: ..., traitCollection: ...)`
    static func marocain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.marocain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu", bundle: ..., traitCollection: ...)`
    static func menu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "orangeShade", bundle: ..., traitCollection: ...)`
    static func orangeShade(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orangeShade, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pinkCard", bundle: ..., traitCollection: ...)`
    static func pinkCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pinkCard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "pizza", bundle: ..., traitCollection: ...)`
    static func pizza(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pizza, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "purpleCard", bundle: ..., traitCollection: ...)`
    static func purpleCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.purpleCard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "restauPref", bundle: ..., traitCollection: ...)`
    static func restauPref(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.restauPref, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "salade", bundle: ..., traitCollection: ...)`
    static func salade(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.salade, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sheet-bottom-fog-12", bundle: ..., traitCollection: ...)`
    static func sheetBottomFog12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sheetBottomFog12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sheet-bottom-fog-40", bundle: ..., traitCollection: ...)`
    static func sheetBottomFog40(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sheetBottomFog40, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "suggestion", bundle: ..., traitCollection: ...)`
    static func suggestion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.suggestion, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tealCard", bundle: ..., traitCollection: ...)`
    static func tealCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tealCard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yellowCard", bundle: ..., traitCollection: ...)`
    static func yellowCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yellowCard, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `RestaurantsListTableViewCell`.
    static let restaurantsListTableViewCell = _R.nib._RestaurantsListTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RestaurantsListTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.restaurantsListTableViewCell) instead")
    static func restaurantsListTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.restaurantsListTableViewCell)
    }
    #endif

    static func restaurantsListTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RestaurantsListTableViewCell? {
      return R.nib.restaurantsListTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RestaurantsListTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `PreferenceCell`.
    static let preferenceCell: Rswift.ReuseIdentifier<PreferenceChoiceCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PreferenceCell")
    /// Reuse identifier `RestaurantsCell`.
    static let restaurantsCell: Rswift.ReuseIdentifier<RestaurantsListTableViewCell> = Rswift.ReuseIdentifier(identifier: "RestaurantsCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 20 localization keys.
    struct localizable {
      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static let btnCancel = Rswift.StringResource(key: "btnCancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Check the list !
      ///
      /// Locales: en, fr
      static let btnGoToListe = Rswift.StringResource(key: "btnGoToListe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Eat here !
      ///
      /// Locales: en, fr
      static let mainScreenTitle = Rswift.StringResource(key: "mainScreenTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: en, fr
      static let labelUpdate = Rswift.StringResource(key: "labelUpdate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Error
      ///
      /// Locales: en, fr
      static let mapErrorTitle = Rswift.StringResource(key: "mapErrorTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Gastronomic criteria
      ///
      /// Locales: en, fr
      static let labelGastro = Rswift.StringResource(key: "labelGastro", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Google maps is not installed
      ///
      /// Locales: en, fr
      static let mapError = Rswift.StringResource(key: "mapError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: It's Time !
      ///
      /// Locales: en, fr
      static let notifTitle = Rswift.StringResource(key: "notifTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Locate
      ///
      /// Locales: en, fr
      static let btnMap = Rswift.StringResource(key: "btnMap", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Location Services are disabled
      ///
      /// Locales: en, fr
      static let locationErrorTitle = Rswift.StringResource(key: "locationErrorTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: No such restaurant in the mentioned area
      ///
      /// Locales: en, fr
      static let labelNoResto = Rswift.StringResource(key: "LabelNoResto", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Notification Time
      ///
      /// Locales: en, fr
      static let notifTime = Rswift.StringResource(key: "notifTime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Notification is not authorized
      ///
      /// Locales: en, fr
      static let notifErrorTitle = Rswift.StringResource(key: "notifErrorTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please enable Location Services in your Settings to use the application
      ///
      /// Locales: en, fr
      static let locationError = Rswift.StringResource(key: "locationError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Please enable the notifications in your settings
      ///
      /// Locales: en, fr
      static let notifError = Rswift.StringResource(key: "notifError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Search Criteria
      ///
      /// Locales: en, fr
      static let labelCritere = Rswift.StringResource(key: "labelCritere", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Validate
      ///
      /// Locales: en, fr
      static let btnValider = Rswift.StringResource(key: "btnValider", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: Warning
      ///
      /// Locales: en, fr
      static let prefErrorTitle = Rswift.StringResource(key: "prefErrorTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: You must choose at least 2 categories
      ///
      /// Locales: en, fr
      static let prefError = Rswift.StringResource(key: "prefError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)
      /// en translation: let's try a new restaurant today
      ///
      /// Locales: en, fr
      static let notifBody = Rswift.StringResource(key: "notifBody", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "fr"], comment: nil)

      /// en translation: Cancel
      ///
      /// Locales: en, fr
      static func btnCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btnCancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btnCancel"
        }

        return NSLocalizedString("btnCancel", bundle: bundle, comment: "")
      }

      /// en translation: Check the list !
      ///
      /// Locales: en, fr
      static func btnGoToListe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btnGoToListe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btnGoToListe"
        }

        return NSLocalizedString("btnGoToListe", bundle: bundle, comment: "")
      }

      /// en translation: Eat here !
      ///
      /// Locales: en, fr
      static func mainScreenTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mainScreenTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mainScreenTitle"
        }

        return NSLocalizedString("mainScreenTitle", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: en, fr
      static func labelUpdate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("labelUpdate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "labelUpdate"
        }

        return NSLocalizedString("labelUpdate", bundle: bundle, comment: "")
      }

      /// en translation: Error
      ///
      /// Locales: en, fr
      static func mapErrorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mapErrorTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mapErrorTitle"
        }

        return NSLocalizedString("mapErrorTitle", bundle: bundle, comment: "")
      }

      /// en translation: Gastronomic criteria
      ///
      /// Locales: en, fr
      static func labelGastro(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("labelGastro", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "labelGastro"
        }

        return NSLocalizedString("labelGastro", bundle: bundle, comment: "")
      }

      /// en translation: Google maps is not installed
      ///
      /// Locales: en, fr
      static func mapError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mapError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mapError"
        }

        return NSLocalizedString("mapError", bundle: bundle, comment: "")
      }

      /// en translation: It's Time !
      ///
      /// Locales: en, fr
      static func notifTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notifTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notifTitle"
        }

        return NSLocalizedString("notifTitle", bundle: bundle, comment: "")
      }

      /// en translation: Locate
      ///
      /// Locales: en, fr
      static func btnMap(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btnMap", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btnMap"
        }

        return NSLocalizedString("btnMap", bundle: bundle, comment: "")
      }

      /// en translation: Location Services are disabled
      ///
      /// Locales: en, fr
      static func locationErrorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("locationErrorTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "locationErrorTitle"
        }

        return NSLocalizedString("locationErrorTitle", bundle: bundle, comment: "")
      }

      /// en translation: No such restaurant in the mentioned area
      ///
      /// Locales: en, fr
      static func labelNoResto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("LabelNoResto", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "LabelNoResto"
        }

        return NSLocalizedString("LabelNoResto", bundle: bundle, comment: "")
      }

      /// en translation: Notification Time
      ///
      /// Locales: en, fr
      static func notifTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notifTime", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notifTime"
        }

        return NSLocalizedString("notifTime", bundle: bundle, comment: "")
      }

      /// en translation: Notification is not authorized
      ///
      /// Locales: en, fr
      static func notifErrorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notifErrorTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notifErrorTitle"
        }

        return NSLocalizedString("notifErrorTitle", bundle: bundle, comment: "")
      }

      /// en translation: Please enable Location Services in your Settings to use the application
      ///
      /// Locales: en, fr
      static func locationError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("locationError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "locationError"
        }

        return NSLocalizedString("locationError", bundle: bundle, comment: "")
      }

      /// en translation: Please enable the notifications in your settings
      ///
      /// Locales: en, fr
      static func notifError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notifError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notifError"
        }

        return NSLocalizedString("notifError", bundle: bundle, comment: "")
      }

      /// en translation: Search Criteria
      ///
      /// Locales: en, fr
      static func labelCritere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("labelCritere", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "labelCritere"
        }

        return NSLocalizedString("labelCritere", bundle: bundle, comment: "")
      }

      /// en translation: Validate
      ///
      /// Locales: en, fr
      static func btnValider(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("btnValider", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "btnValider"
        }

        return NSLocalizedString("btnValider", bundle: bundle, comment: "")
      }

      /// en translation: Warning
      ///
      /// Locales: en, fr
      static func prefErrorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("prefErrorTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "prefErrorTitle"
        }

        return NSLocalizedString("prefErrorTitle", bundle: bundle, comment: "")
      }

      /// en translation: You must choose at least 2 categories
      ///
      /// Locales: en, fr
      static func prefError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("prefError", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "prefError"
        }

        return NSLocalizedString("prefError", bundle: bundle, comment: "")
      }

      /// en translation: let's try a new restaurant today
      ///
      /// Locales: en, fr
      static func notifBody(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("notifBody", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "notifBody"
        }

        return NSLocalizedString("notifBody", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _RestaurantsListTableViewCell.validate()
    }

    struct _RestaurantsListTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RestaurantsListTableViewCell

      let bundle = R.hostingBundle
      let identifier = "RestaurantsCell"
      let name = "RestaurantsListTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RestaurantsListTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RestaurantsListTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bg-dark-down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg-dark-down' is used in nib 'RestaurantsListTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "default-food", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default-food' is used in nib 'RestaurantsListTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try onBoarding.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "Bitmap", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Bitmap' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "orangeShade", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'orangeShade' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "salade", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'salade' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RestaurantViewController

      let bundle = R.hostingBundle
      let name = "Main"
      let preferenceChoiceViewController = StoryboardViewControllerResource<PreferenceChoiceViewController>(identifier: "PreferenceChoiceViewController")
      let restaurantsListViewController = StoryboardViewControllerResource<RestaurantsListViewController>(identifier: "RestaurantsListViewController")
      let restaurantsViewController = StoryboardViewControllerResource<RestaurantViewController>(identifier: "RestaurantsViewController")
      let settingsViewController = StoryboardViewControllerResource<GeneralSettingsViewController>(identifier: "SettingsViewController")

      func preferenceChoiceViewController(_: Void = ()) -> PreferenceChoiceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: preferenceChoiceViewController)
      }

      func restaurantsListViewController(_: Void = ()) -> RestaurantsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: restaurantsListViewController)
      }

      func restaurantsViewController(_: Void = ()) -> RestaurantViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: restaurantsViewController)
      }

      func settingsViewController(_: Void = ()) -> GeneralSettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Bitmap", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Bitmap' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "default-food", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default-food' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'heart' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pencil.and.ellipsis.rectangle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pencil.and.ellipsis.rectangle' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pizza", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pizza' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sheet-bottom-fog-12", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sheet-bottom-fog-12' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "yellowCard", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'yellowCard' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "primaryColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryColor' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "primaryTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'primaryTextColor' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().preferenceChoiceViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'preferenceChoiceViewController' could not be loaded from storyboard 'Main' as 'PreferenceChoiceViewController'.") }
        if _R.storyboard.main().restaurantsListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'restaurantsListViewController' could not be loaded from storyboard 'Main' as 'RestaurantsListViewController'.") }
        if _R.storyboard.main().restaurantsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'restaurantsViewController' could not be loaded from storyboard 'Main' as 'RestaurantViewController'.") }
        if _R.storyboard.main().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Main' as 'GeneralSettingsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct onBoarding: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OnBoarding"
      let onBoardingViewController = StoryboardViewControllerResource<OnBoardingViewController>(identifier: "OnBoardingViewController")

      func onBoardingViewController(_: Void = ()) -> OnBoardingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: onBoardingViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.onBoarding().onBoardingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'onBoardingViewController' could not be loaded from storyboard 'OnBoarding' as 'OnBoardingViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
